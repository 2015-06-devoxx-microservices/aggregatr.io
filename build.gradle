buildscript {
    repositories {
        mavenLocal()
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.4.RELEASE'
        classpath 'com.ofg:uptodate-gradle-plugin:0.0.5'
        if(project.hasProperty("coverage")) { classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2' }
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'uptodate'

ext.versionPrefix = "CD"
ext.buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
ext.currentVersion = "${versionPrefix}-${buildNrLoc}"

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://nexus.microhackathon.pl/content/repositories/releases/") {
            authentication(userName: 'deployment', password: 'deployment123')
        }
        pom.version = "${currentVersion}"
        pom.artifactId = "twitter-places-analyzer"
        pom.groupId = "pl.microhackaton"
    }
}

ext {
    groovyVersion = '2.3.3'
    spockVersion = '0.7-groovy-2.0'
    springBootVersion = '1.1.4.RELEASE'
    springVersion = '4.0.6.RELEASE'
    jacksonMapper = '1.9.13'
    aspectjVersion = '1.8.1'
    microDepsVersion = '0.3.1'
    microDepsSpringVersion = '0.0.8'

    stubRepositoryUrl = 'http://nexus.microhackathon.pl/content/groups/public/'
    zookeeperPort = 2181
    zookeeperMockPort = 18081
}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

jar {
    dependsOn addHashFile
    baseName = ''
    version =  '0.1.0'
    from "commitHash.txt"
}

run {
    systemProperties = System.properties
}

//Workaround for the issue with Java 8u11 and 7u65 - http://www.infoq.com/news/2014/08/Java8-U11-Broke-Tools
test {
     jvmArgs '-noverify'
}
applicationDefaultJvmArgs = [ "-noverify" ]

repositories {
    mavenLocal()
    maven { url 'http://repository.codehaus.org' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://dl.bintray.com/4finance/micro-deps' }
    mavenCentral()
    jcenter()
}

configurations {
    mockDependencies
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion:indy"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:17.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el:8.0.9'
    compile 'com.jayway.jsonpath:json-path-assert:0.9.1'
    compile 'org.yaml:snakeyaml:1.13'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.1.2.Final'
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    compile 'org.apache.ivy:ivy:2.3.0'
    compile "com.mangofactory:swagger-springmvc:0.8.5"
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'net.sf.ehcache:ehcache:2.8.3'
    // microservices
    compile("com.ofg:micro-deps-spring-config:$microDepsSpringVersion") {
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
    }
    compile 'com.ofg:micro-infra-spring:0.0.1'

    runtime "cglib:cglib-nodep:3.1"
    runtime "org.objenesis:objenesis:2.1" // allows mocking of classes without default constructor (together with CGLIB)
    runtime 'org.aspectj:aspectjweaver:1.8.1'

    testCompile 'junit:junit:4.11'
    testCompile 'com.jayway.awaitility:awaitility:1.6.1'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntime("org.spockframework:spock-spring:$spockVersion") {
        exclude group: 'org.spockframework', module: 'spock-core'
    }
    testCompile 'org.springframework:spring-test:4.0.6.RELEASE'
    testCompile 'com.github.tomakehurst:wiremock:1.47'
    testCompile("com.ofg:micro-deps-spring-test-config:0.0.8") {
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
    }
    testCompile "com.ofg:micro-deps-spring-test-config:$microDepsSpringVersion"
    mockDependencies 'com.ofg:micro-deps:0.3.1:fatJar'
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }
    
    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }
    
    test {
        ignoreFailures = true
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
            property "sonar.host.url", ""
            property "sonar.junit.reportsPath", "build/test-results"
        }
    }

}

task runMocks << {
    File microserviceMetadata = sourceSets.main.resources.find { it.name == 'microservice.json' }
    String microDepsFatJar = configurations.mockDependencies.find { it.name.startsWith 'micro-deps' }
    String runMocksCommand = "java -jar $microDepsFatJar -p $zookeeperPort -mp $zookeeperMockPort -f ${microserviceMetadata.absolutePath} -r $stubRepositoryUrl"
    runMocksCommand.execute()
}

task stopMocks << {
    "http://localhost:$zookeeperMockPort/stop".toURL().readLines()
}
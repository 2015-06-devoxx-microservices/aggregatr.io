import java.lang.management.ManagementFactory

buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
        classpath("com.ofg:uptodate-gradle-plugin:0.0.2")
        classpath("com.ofg:micro-deps:0.0.4:fatJar")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco'
apply plugin: 'uptodate'

ext.versionPrefix = "CD"
ext.buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
ext.currentVersion = "${versionPrefix}-${buildNrLoc}"

build.dependsOn 'uptodate'

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://nexus.4finance.net/content/repositories/Pipeline") {
            //TODO: fill this in
            authentication(userName: '', password: '')
        }
        pom.version = "${currentVersion}"
        pom.artifactId = "" //TODO: fill this in
        pom.groupId = "com.ofg"
    }
}

ext {
    groovyVersion = '2.3.2'
    spockVersion = '0.7-groovy-2.0'
    springBootVersion = '1.1.1.RELEASE'
    jacksonMapper = '1.9.13'
    aspectjVersion = '1.8.0'
    microDepsVersion = '0.0.4'

    zookeeperPort = 2181
    zookeeperMockPort = 18081
}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

build.dependsOn 'uptodate'

repositories {
    mavenLocal()
    maven { url 'http://repository.codehaus.org' }
    maven { url 'http://repo.spring.io/milestone' }
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.codehaus.groovy:groovy-all:$groovyVersion:indy"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.0'
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapper"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonMapper"
    compile 'com.google.guava:guava:17.0'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.tomcat.embed:tomcat-embed-el:8.0.8'
    compile 'com.jayway.jsonpath:json-path-assert:0.9.1'
    compile 'org.yaml:snakeyaml:1.13'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.1.1.Final'
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    compile("com.ofg:micro-deps:$microDepsVersion") {
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
    }

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntime("org.spockframework:spock-spring:$spockVersion") {
        exclude group: 'org.spockframework', module: 'spock-core'
    }
    testCompile 'org.springframework:spring-test:4.0.5.RELEASE'
    testRuntime "cglib:cglib-nodep:3.1"
    testRuntime "org.objenesis:objenesis:2.1"
    // allows mocking of classes without default constructor (together with CGLIB)
    testCompile 'com.github.tomakehurst:wiremock:1.46'
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

sourceSets {
    test {
        groovy {
            srcDirs = ['src/test/groovy']
        }
    }
}

sonarRunner {
    sonarProperties {
        //TODO: fill this
        property "sonar.host.url", ""
        property "sonar.junit.reportsPath", "build/test-results"
    }
}

jacoco {
    toolVersion = "0.7.0.201403182114"
}

buildscript {
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.2'
    }
}


if (project.hasProperty("coverage")) {
    apply plugin: 'cobertura'
    apply plugin: 'codenarc'

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.20'
    }

    test {
        ignoreFailures = true
    }

    cobertura {
        coverageFormats = ['html', 'xml']
    }

}

task runMocks << {
    String microDepsFatJar = buildscript.configurations.classpath.find { it.name.startsWith("micro-deps") }
    String microDepCMD = "java -jar $microDepsFatJar $zookeeperPort $zookeeperMockPort"
    Process process = microDepCMD.execute()
}

task stopMocks << {
    "http://localhost:$zookeeperMockPort/stop".toURL().readLines()
}